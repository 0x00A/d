#!/usr/bin/env node

var deploytool = require('../lib/deploytool'),
    repl = require('repl'),
    fs = require('fs'),
    path = require('path'),
    ansi = require('ansi'),
    argv = require('optimist').argv,
    dpkg = require('../package.json'),
    common = require('../lib/common'),
    asni = require('ansi')(process.stdout);


var pathname = __dirname + '/../lib/commands';

var commands = deploytool.commands = {};
var log = common.log;
var pkg;

log(0, 'deploytool v' + dpkg.version);
log(0, 'node ' + process.version);

try {

  pkg = require(process.cwd() + '/package.json');
}
catch(ex) {
  
  log(2, 'No package.json file found in this directory.\r\n');
  process.exit(1);
}

//
// get all of the commands from the commands directory,
// require them so they can be used with the REPL or via
// arguments that are provided from the command line.
//
fs.readdirSync(pathname).forEach(function (name) {

  if (path.extname(name) === '.js') {

    var basename = path.basename(name, '.js');
    var rawfile = path.join(pathname, basename);

    commands[basename] = require(rawfile);
  }
});

//
// if there are no arguments provided at the commandline
// we want to go into interactive mode.
//
var replHandler = function replHandler(config) {

  var prompt = pkg.name + ' ' + pkg.version + '>';
  
  //
  // create a repl that will process input and run the appropriate commands.
  //
  var rpl = repl.start(prompt, null, function evil(cmd, r, name, fn) {

    //
    // the repl will give us the contents of the line as a string we can split.
    //
    var args = cmd.replace(/^\(|\)$/g, '').replace('\n', '').split(' ');
    
    //
    // the first arg will be the command to execute.
    //
    var command = args.splice(0, 1)[0];

    if (command === '') {
      // do nothing. 
    }
    else if (command === 'help') {
      printMessage(args[0]);
    }
    else if (command === 'exit' || command === 'quit') {
      process.exit(0);
    }
    else if (commands[command] && commands[command].command) {
      
      //
      // attempt to execute a command that appears to exist.
      //
      commands[command].command.call(deploytool, args, config, function() {
        process.stdin.emit('keypress', '\r', { name: 'enter', ctrl: false, meta: false, shift: false }); 
      });
    }
    else {
      //
      // say something helpful if the user entered garbage input.
      //
      log(0, 'Type `help` for all commands or `help <command>`.\r\n');
    }

    repl.repl.displayPrompt();
  });
 
};

var cliHandler = function cliHandler(config) {

  var command = argv._.splice(0, 1)[0]; // splice out the first item.

  //
  // if the user wants help on a particular command.
  //
  if (argv.h || argv.help || command === 'help') {

    printMessage(argv._[0]); // the new first item of the array.
  }
  else if (commands[command]) {

    //
    // pass in the arguments that the user wants to send to
    // the command as well as the configuration for this repo.
    //
    commands[command].command.call(deploytool, argv._, config);
  }
};

var handler = process.argv.length === 2 ? replHandler : cliHandler;

//
// ensure we have a git repository, if we don't, initalize one.
//
deploytool.git.init(function(err) {


  if (err) {

    throw err;
  }
  else {

    //
    // get the information about the repo.
    //
    deploytool.git.repoInfo(function(err, data) {

      if (err) {
        throw err;
      }

      var user = deploytool.git.getUserIdentity(data);

      log(0, 'Logged in as ' + user.name + ' (' + user.id + ')\n');
      
      handler(data);
    });
  }
});

var printMessage = function printMessage(command) {

  if (command && commands[command]) {

    //
    // if a second argument was provided, print its help and usage.
    //
    log(-1, '\n' + commands[command].help.join('\n') + '\n'); 
    log(-1, 'Usage: ' + commands[command].usage.join('\n') + '\n');
  }
  else {

    //
    // print all of the usage for each command
    //
    log(-1, '\nHelp'.underline + '\n');

    for (var command in commands) {
      if (commands[command].usage) {
        log(-1, commands[command].usage.join('\n'));
      }
    }
    log(-1, '\n');
  }
};

process.on('exit', function() {
  log(-1, '\n');
});
