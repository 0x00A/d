#!/usr/bin/env node

var deploytool = require('../lib/deploytool'),
    readline = require('readline'),
    fs = require('fs'),
    path = require('path'),
    ansi = require('ansi'),
    argv = require('optimist').argv,
    dpkg = require('../package.json'),
    common = require('../lib/common'),
    asni = require('ansi')(process.stdout);


var pathname = __dirname + '/../lib/commands';

deploytool.commands = {
  raw: {},
  shortlist: [],
  longlist: {}
};

var commands = deploytool.commands.raw;
var aliases = {};

var log = common.log;
var pkg;

log(0, 'deploytool v' + dpkg.version);
log(0, 'node ' + process.version);

try {

  pkg = require(process.cwd() + '/package.json');
}
catch(ex) {
  
  log(1, 'No package.json file found in this directory\r\n');
}

//
// get all of the commands from the commands directory,
// require them so they can be used with the REPL or via
// arguments that are provided from the command line.
//
fs.readdirSync(pathname).forEach(function (name) {

  var shortlist = deploytool.commands.shortlist;
  var longlist = deploytool.commands.longlist;

  //
  // get the code for each command and pull it in for use.
  //
  if (path.extname(name) === '.js') {

    var basename = path.basename(name, '.js');
    var rawfile = path.join(pathname, basename);

    commands[basename] = require(rawfile);
  }

  //
  // get the help information out of the commands and
  // make it look nice and presentable for reading.
  //
  var namelength, namemargin = 0;
  var maxwidth = process.stdout.getWindowSize()[0];

  for (var command in commands) {

    shortlist.push(command);

    var usage = commands[command].usage;
    var args = [], argdescriptions = [];

    var alias = commands[command].alias;

    if (alias) {

      for (var i = 0, l = alias.length; i < l; i++) {
        aliases[alias[i]] = commands[command];
      }
    }   

    for (var arg in usage) {
      args.push(arg);
      argdescriptions.push(arg + ' ' + usage[arg]);
    }

    longlist[command] = [
      command,
      commands[command].description.join('\r\n'),
      args.join(' '),
      argdescriptions.join('\r\n  '),
      alias ? alias.join() : ''
    ];

    namelength = command.length;

    if (namelength > namemargin) {
      namemargin = namelength;
    }
  }

  for (var command in longlist) {

    namelength = command.length;

    var difference = namemargin - namelength;

    if (difference > 0) {
      for (var i = 0, d = difference; i < d; i++) {
        longlist[command][0] += ' ';
      }
    }
  }
});

//
// if there are no arguments provided at the commandline
// we want to go into interactive mode.
//
var replHandler = function replHandler(config) {

  var shortlist = deploytool.commands.shortlist;

  function completer(line) {

    //
    // calculate the matches from the shortlist.
    //
    var hits = shortlist.filter(function(c) {
      return c.indexOf(line) === 0;
    });

    //
    // show all completions if none found
    //
    return [hits.length ? hits : shortlist, line]
  }

  var opts = {
    completer: completer,
    input: process.stdin,
    output: process.stdout
  };

  var rl = readline.createInterface(opts);

  rl.setPrompt('>');
  rl.prompt();

  rl.on('line', function(line) {

    var args = line.trim().split(' ');
    var name = args.splice(0, 1)[0];
    var container = commands[name] || aliases[name];

    if (name === 'exit') {
      process.exit(0);
    }
    else if (container) {
      container.command.call(deploytool, args, config, function() {
        process.stdin.emit('keypress', '\r\n', { name: 'enter' }); 
      });
    }

    rl.prompt();

  }).on('close', function() {
    process.exit(0);
  });

};

var cliHandler = function cliHandler(config) {

  var name = argv._.splice(0, 1)[0]; // splice out the first item.

  if (argv.h) { // in the case of shorthand.

    name = 'help';
    argv._ = [argv.h];
  }

  var container = commands[name] || aliases[name];

  if (container) {

    //
    // pass in the arguments that the user wants to send to
    // the command as well as the configuration for this repo.
    //
    container.command.call(deploytool, argv._, config, function() {
      console.log('\r\n');
      process.stdin.emit('keypress', '\r\n', { name: 'enter' }); 
    });
  }
};

var handler = process.argv.length === 2 ? replHandler : cliHandler;

//
// ensure we have a git repository, if we don't, initalize one.
//
deploytool.git.startup(function(err) {

  if (err) {

    throw err;
  }
  else {

    //
    // get the information about the repo.
    //
    deploytool.git.repoInfo(function(err, config) {

      if (err) {
        throw err;
      }

      var user = deploytool.git.getUserIdentity(config);
 
      //
      // generate the whoami command.
      //
      deploytool.git.whoami = function() {
        log(0, 'User identified as ' + user.name + ' (' + user.id + ')\n');
      };
      
      deploytool.git.whoami();
      handler(config);
    });
  }
});


